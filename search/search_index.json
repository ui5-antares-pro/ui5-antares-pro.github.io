{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>UI5 Antares Pro is a modular SAPUI5 library designed to standardize and accelerate the implementation of CRUD operations for OData EntitySets in enterprise applications.</p> <p>Leveraging the OData model defined in the consuming application, the library dynamically generates UI elements such as dialogs, forms, and tables. Full lifecycle handling is provided, including data binding, submission, and error management. Support is also included for custom validation logic, which can be implemented by the consumer as needed.</p> <p>Attention</p> <p>The library currently supports only sap.ui.model.odata.v2.ODataModel. Support for OData v4 is not yet available.</p> <p>Info</p> <p>UI5 Antares Pro is the successor of the UI5 Antares library, completely rebuilt from the ground up with a renewed code base to ensure higher code quality, better maintainability, and enhanced performance. It adds advanced capabilities such as comprehensive navigation handling and improved flexibility for robust SAPUI5 apps.</p>"},{"location":"#integration-modes","title":"Integration Modes","text":"<p>Two integration modes are supported:</p> <ul> <li> <p>Dialog Mode   A ready-to-use sap.m.Dialog is generated with embedded form and table components for rapid deployment.</p> </li> <li> <p>Component Mode   A reusable UI component is exposed, which can be integrated via sap.ui.core.ComponentContainer. This allows the consumer to position and style the component freely within the application layout while benefiting from the same functionality.</p> </li> </ul>"},{"location":"#core-features","title":"Core Features","text":"<p>UI5 Antares Pro promotes consistency, reusability, and reduced development effort across SAPUI5-based projects, making it a valuable foundation for scalable and maintainable enterprise UI development.</p> <ul> <li> <p>Auto Dialog Generation   Automatically generates fully functional dialogs with forms and tables based on OData metadata.</p> </li> <li> <p>Reusable Components   Provides library components that can be integrated flexibly within different UI layouts.</p> </li> <li> <p>ValueList Support   Advanced filter and value help dialogs for improved data selection experience.</p> </li> <li> <p>ValidationLogic Integration   Built-in support for complex validation rules and custom validator functions.</p> </li> <li> <p>Navigation (Association) Handling   Handles 1-N and 1-1 OData associations gracefully with auto-generated tables and navigation properties.</p> </li> <li> <p>Lifecycle Management   Manages data binding, submission, error handling, and UI refresh cycles seamlessly.</p> </li> <li> <p>TypeScript-Based   Developed in TypeScript for improved maintainability and type safety.</p> </li> </ul>"},{"location":"#compatibility","title":"Compatibility","text":"<p>UI5 Antares Pro is developed using TypeScript and is fully compatible with both JavaScript-based and TypeScript-based SAPUI5 applications.</p>"},{"location":"#change-log","title":"Change Log","text":"<p>Please see Change Log.</p>"},{"location":"change_log/","title":"Change Log","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Change Log.</p>"},{"location":"change_log/#102-sapui5-version-1136x-2025-08-06","title":"1.0.2 (SAPUI5 Version 1.136.x) - 2025-08-06","text":""},{"location":"change_log/#added","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"change_log/#101-sapui5-version-1120x-2025-08-06","title":"1.0.1 (SAPUI5 Version 1.120.x) - 2025-08-06","text":""},{"location":"change_log/#added_1","title":"Added","text":"<ul> <li>Initial productive release.</li> </ul>"},{"location":"core_features/","title":"Introduction","text":"<p>This section documents the core capabilities, configuration options, and behaviors that are shared across all Entry classes in the library \u2014 namely <code>CreateEntry</code>, <code>UpdateEntry</code>, <code>DeleteEntry</code>, and <code>DisplayEntry</code>.</p> <p>The features described here represent the foundational functionality of the UI5 Antares Pro library when working with OData V2 models for creating, updating, deleting, or displaying entity data. These capabilities include parameter configurations, UI generation rules, validation mechanisms, value help integration, and extensibility points.</p> <p>Availability Notice</p> <p>While these features form the common base for all Entry classes, certain capabilities may not be applicable to every class. For example, features related to editable forms may not apply to read-only classes such as <code>DeleteEntry</code> or <code>DisplayEntry</code>. Where applicable, such limitations are explicitly noted in the description of each feature.</p> <p>Example Usage Note</p> <p>In the examples provided throughout this section, the <code>CreateEntry</code> class is used to demonstrate configuration and behavior. However, the same configuration principles apply to the other Entry classes, provided the respective feature is supported in that class.</p>"},{"location":"create_entry/","title":"Overview","text":"<p>The CreateEntry class provides a comprehensive, configurable, and reusable framework designed to facilitate the creation of new entities within an SAPUI5 application leveraging an OData V2 backend service. It acts as the primary entry point for dynamically generating user interfaces centered around form-based data entry and submission.</p> <p>This class abstracts and automates the complexities typically associated with building creation dialogs or embedded form components. It handles form generation, user input validation, integration of navigation properties, error handling, and submission workflows seamlessly, significantly reducing the need for repetitive boilerplate code in consuming applications.</p> <p>The design prioritizes flexibility and extensibility, allowing developers to customize generated UIs extensively through constructor settings and instance methods, while still benefiting from sensible defaults and rich built-in capabilities.</p>"},{"location":"create_entry/#intended-use-case","title":"Intended Use Case","text":"<p>This class is designed primarily for SAPUI5 applications requiring efficient and standardized entity creation dialogs or embedded entry forms bound to an OData V2 service. It is ideal for enterprise-grade applications where reducing manual UI coding effort, ensuring data integrity through validation, and providing a consistent user experience are critical.</p> <p>By encapsulating the complexity of OData metadata parsing, control generation, validation, and submission workflows, the CreateEntry class empowers developers to focus on business logic and user experience enhancements rather than repetitive UI plumbing.</p>"},{"location":"create_entry/#benefits-to-consumers","title":"Benefits to Consumers","text":"<ul> <li> <p>Reduced Development Time   Eliminates repetitive coding tasks for entity creation forms, accelerating development cycles.  </p> </li> <li> <p>Consistency   Ensures uniform behavior and appearance across entity creation workflows within the application.  </p> </li> <li> <p>Extensibility   Offers rich configuration and extensibility points to cater to unique business requirements.  </p> </li> <li> <p>Localization and Accessibility   Supports i18n models for label generation and error messages, enhancing global usability.  </p> </li> <li> <p>Error Resilience   Built-in, configurable error handling and user feedback mechanisms improve application robustness.</p> </li> </ul>"},{"location":"delete_entry/","title":"DeleteEntry","text":"<p>Not available yet...</p>"},{"location":"display_entry/","title":"DisplayEntry","text":"<p>Not available yet...</p>"},{"location":"update_entry/","title":"UpdateEntry","text":"<p>Not available yet...</p>"},{"location":"core_features/ui_settings/configuration/","title":"Configuration","text":"<p>This section describes the user interface\u2013related configuration options available for the Entry classes \u2014 CreateEntry, UpdateEntry, DeleteEntry, and DisplayEntry.  </p> <p>These options allow consumers to control various aspects of the generated UI, including dialog titles, button text and behavior, and other presentation-related settings.  </p> <p>Some configuration options may not be applicable to all Entry classes. Such limitations are clearly mentioned in the description of each feature.</p> <p>Configurations can be applied in two ways:</p> <ul> <li>In the constructor of the Entry class.</li> <li>Via getter/setter methods through an instance of an Entry class.</li> </ul> <p>Note</p> <p>All examples in this section use the CreateEntry class for demonstration purposes. The same configuration applies to other Entry classes as long as the specific feature is supported.</p>"},{"location":"core_features/ui_settings/configuration/#form-position-index","title":"Form Position (index)","text":"<p>By default, the Entry classes place the generated form as the first element within the dialog or embedded component. This position can be adjusted using the <code>index</code> configuration, allowing consumers to determine where the form should appear in relation to other generated content.</p> <p>This feature is especially useful when multiple navigation properties are configured, each producing its own table or form inside the same container. Additionally, <code>ui5.antares.pro.v2.metadata.NavigationProperty</code> instances can also define an <code>index</code> to control the placement of their generated content.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getIndex()</code> <code>number</code> Current index of the generated form; supports negative values to control its position in the dialog or component. </p> <p> Method Parameter Type Mandatory Description <code>setIndex(newValue)</code> <code>newValue</code> <code>number</code> \u2705 Yes Sets the index for the generated form; supports negative values for relative positioning. </p>"},{"location":"core_features/ui_settings/configuration/#example","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\nimport NavigationProperty from \"ui5/antares/pro/v2/metadata/NavigationProperty\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            index: 1 // Position the form after the navigation property content\n        });\n\n        entry.addNavigationProperty(new NavigationProperty({\n            name: \"toSupplier\",\n            index: 0 // Position the navigation property content before the main form\n        }));\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\", // Import the class\n    \"ui5/antares/pro/v2/metadata/NavigationProperty\" // Import the class\n], (Controller, CreateEntry, NavigationProperty) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                index: 1 // Position the form after the navigation property content\n            });\n\n            entry.addNavigationProperty(new NavigationProperty({\n                name: \"toSupplier\",\n                index: 0 // Position the navigation property content before the main form\n            }));\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/configuration/#dialog-title-dialogtitle","title":"Dialog Title (dialogTitle)","text":"<p>In dialog mode, the Entry classes generate a dialog with a default title composed of localized text and the associated <code>EntitySet</code> name. This default title ensures clarity for end users, but consumers can easily override it using the <code>dialogTitle</code> configuration.</p> <p>This feature is especially useful when the default title is too generic or when you want to provide a more descriptive, user-friendly title in the dialog header.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u274c No GetterSetter <p> Method Returns Description <code>getDialogTitle()</code> <code>string</code> Returns the current dialog title. If not explicitly set, returns the generated default title. </p> <p> Method Parameter Type Mandatory Description <code>setDialogTitle(newValue)</code> <code>newValue</code> <code>string</code> \u2705 Yes Sets a custom title for the dialog, replacing the generated default title. </p>"},{"location":"core_features/ui_settings/configuration/#example_1","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            dialogTitle: \"Create New Product\" // Override the default dialog title\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                dialogTitle: \"Create New Product\" // Override the default dialog title\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/configuration/#form-title-formtitle","title":"Form Title (formTitle)","text":"<p>The <code>formTitle</code> property defines the title displayed above the generated form. By default, no title is shown. This property allows you to set a clear and descriptive heading, improving the visual structure and user experience of the form.</p> <p>A custom <code>formTitle</code> is particularly helpful when forms are part of a larger UI and need to convey context or purpose to the end user.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getFormTitle()</code> <code>string | undefined</code> Returns the current form title. If no title is set, returns <code>undefined</code>. </p> <p> Method Parameter Type Mandatory Description <code>setFormTitle(newValue)</code> <code>newValue</code> <code>string</code> \u2705 Yes Sets a custom title for the form. </p>"},{"location":"core_features/ui_settings/configuration/#example_2","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            formTitle: \"Product Details\" // Set a custom form title\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                formTitle: \"Product Details\" // Set a custom form title\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/configuration/#form-type-formtype","title":"Form Type (formType)","text":"<p>Determines the type of form generated for the specified <code>EntitySet</code>.  By default, the library creates a SmartForm, which is metadata-driven and supports advanced features such as smart fields, annotations, and automatic OData integration.</p> <p>This property allows consumers to switch to a SimpleForm when a simpler, less metadata-heavy layout is desired. <code>SimpleForm</code> offers more control over layout and content, making it suitable for custom UI scenarios or when metadata is incomplete.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getFormType()</code> <code>FormType</code> Returns the current form type. If not explicitly set, returns the default value <code>\"SmartForm\"</code>. </p> <p> Method Parameter Type Mandatory Description <code>setFormType(newValue)</code> <code>newValue</code> <code>FormType</code> \u2705 Yes Sets the type of form to generate. Must be either <code>\"SmartForm\"</code> or <code>\"SimpleForm\"</code>. </p>"},{"location":"core_features/ui_settings/configuration/#formtype-values","title":"FormType Values","text":"Value Description <code>SmartForm</code> Generates a SmartForm using OData metadata to automatically create fields, labels, and layout. <code>SimpleForm</code> Generates a SimpleForm, offering more flexibility for custom layouts and manual field creation."},{"location":"core_features/ui_settings/configuration/#example_3","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            formType: \"SimpleForm\" // Switch to SimpleForm\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                formType: \"SimpleForm\" // Switch to SimpleForm\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/configuration/#submit-button-text-submitbuttontext","title":"Submit Button Text (submitButtonText)","text":"<p>Text displayed on the submit button within the generated dialog. A default localized text is provided by the library based on the current language. This property allows the consumer to override the button text.</p> <p>Note</p> <p>The submit button is not generated when using the DisplayEntry class. Additionally, the library will not generate any button in the <code>Component Mode</code> regardless of which Entry class is utilized.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u274c No Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u274c No GetterSetter <p> Method Returns Description <code>getSubmitButtonText()</code> <code>string</code> Returns the current submit button text. If not explicitly set, returns the default localized text. </p> <p> Method Parameter Type Mandatory Description <code>setSubmitButtonText(newValue)</code> <code>newValue</code> <code>string</code> \u2705 Yes Sets a custom text for the submit button, overriding the default localized text. </p>"},{"location":"core_features/ui_settings/configuration/#example_4","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            submitButtonText: \"Send Data\" // Override the submit button text\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                submitButtonText: \"Send Data\" // Override the submit button text\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/configuration/#submit-button-type-submitbuttontype","title":"Submit Button Type (submitButtonType)","text":"<p>Button Type of the submit button in the generated dialog. Defaults to Emphasized. This property allows the consumer to configure a different button type.</p> <p>Note</p> <p>The submit button is not generated when using the DisplayEntry class. Additionally, the library will not generate any button in the <code>Component Mode</code> regardless of which Entry class is utilized.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u274c No Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u274c No GetterSetter <p> Method Returns Description <code>getSubmitButtonType()</code> ButtonType Returns the current submit button type. If not explicitly set, returns the default value <code>Emphasized</code>. </p> <p> Method Parameter Type Mandatory Description <code>setSubmitButtonType(newValue)</code> <code>newValue</code> ButtonType \u2705 Yes Sets a custom button type for the submit button, overriding the default <code>Emphasized</code> type. </p>"},{"location":"core_features/ui_settings/configuration/#example_5","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\nimport ButtonType from \"sap/m/ButtonType\"; // Import the ButtonType enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            submitButtonType: ButtonType.Reject // Override the submit button type\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\", // Import the class\n    \"sap/m/ButtonType\" // Import the ButtonType enum\n], (Controller, CreateEntry, ButtonType) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                submitButtonType: ButtonType.Reject // Override the submit button type\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/configuration/#close-button-text-closebuttontext","title":"Close Button Text (closeButtonText)","text":"<p>Text displayed on the close button within the generated dialog. A default localized text is provided by the library based on the current language. This property allows the consumer to override the button text.</p> <p>Note</p> <p>The library will not generate any button in the <code>Component Mode</code> regardless of which Entry class is utilized.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u274c No GetterSetter <p> Method Returns Description <code>getCloseButtonText()</code> <code>string</code> Returns the current close button text. If not explicitly set, returns the default localized text. </p> <p> Method Parameter Type Mandatory Description <code>setCloseButtonText(newValue)</code> <code>newValue</code> <code>string</code> \u2705 Yes Sets a custom text for the close button, overriding the default localized text. </p>"},{"location":"core_features/ui_settings/configuration/#example_6","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            closeButtonText: \"Cancel\" // Override the close button text\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                closeButtonText: \"Cancel\" // Override the close button text\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/configuration/#close-button-type-closebuttontype","title":"Close Button Type (closeButtonType)","text":"<p>Button Type of the close button in the generated dialog. Defaults to Default. This property allows the consumer to configure a different button type.</p> <p>Note</p> <p>The library will not generate any button in the <code>Component Mode</code> regardless of which Entry class is utilized.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u274c No GetterSetter <p> Method Returns Description <code>getCloseButtonType()</code> ButtonType Returns the current close button type. If not explicitly set, returns the default value <code>Default</code>. </p> <p> Method Parameter Type Mandatory Description <code>setCloseButtonType(newValue)</code> <code>newValue</code> ButtonType \u2705 Yes Sets a custom button type for the close button, overriding the default <code>Default</code> type. </p>"},{"location":"core_features/ui_settings/configuration/#example_7","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\nimport ButtonType from \"sap/m/ButtonType\"; // Import the ButtonType enum\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            closeButtonType: ButtonType.Reject // Override the close button type\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\", // Import the class\n    \"sap/m/ButtonType\" // Import the ButtonType enum\n], (Controller, CreateEntry, ButtonType) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                closeButtonType: ButtonType.Reject // Override the close button type\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/custom_content/","title":"Custom Content","text":"<p>Not available yet...</p>"},{"location":"core_features/ui_settings/custom_element/","title":"Custom Element","text":"<p>Not available yet...</p>"},{"location":"core_features/ui_settings/initial_data/","title":"Initial Data","text":"<p>This section describes the initial data\u2013related configuration options that control the default values assigned to specific property types when an Entry class \u2014 CreateEntry, UpdateEntry, DeleteEntry, and DisplayEntry \u2014 instance is created.  </p> <p>These options allow the consumer to define how properties of certain EDM types should be pre-filled if no explicit values are provided in the initial data. This helps prevent unintended <code>null</code> values in newly created entities and ensures consistency in default data handling.</p> <p>Two key behaviors are supported:</p> <ul> <li> <p>Guid Generation Mode   Automatically generates random GUID values for properties of type <code>Edm.Guid</code> if no value is provided.</p> </li> <li> <p>Initial Boolean Values   Sets <code>false</code> as the default value for properties of type <code>Edm.Boolean</code> if no value is provided. Without this option, such properties would default to <code>null</code>.</p> </li> </ul> <p>Configurations can be applied in two ways:</p> <ul> <li>In the constructor of the Entry class.  </li> <li>Via getter/setter methods through an instance of an Entry class.</li> </ul> <p>Note</p> <p>All examples in this section use the CreateEntry class for demonstration purposes. The same configuration applies to other Entry classes as long as the specific feature is supported.</p>"},{"location":"core_features/ui_settings/initial_data/#guid-generation-mode-guidgenerationmode","title":"Guid Generation Mode (guidGenerationMode)","text":"<p>Controls the way Edm.Guid properties are automatically populated when creating a new entry.</p> <p>Supported modes:</p> <ul> <li>All \u2013 Generates random GUID values for all Edm.Guid properties.  </li> <li>Key \u2013 Generates random GUID values only for key Edm.Guid properties.  </li> <li>NonKey \u2013 Generates random GUID values only for non-key Edm.Guid properties.  </li> <li>None \u2013 Does not generate any GUID values automatically (properties will remain <code>null</code> unless explicitly set).</li> </ul> <p>Note</p> <ul> <li>Initial data can only be set by the consumer via the <code>run</code> method of the Entry class instance or Component instance. If the consumer sets initial data for <code>Edm.Guid</code> properties explicitly, the library will not generate any random guid values for those properties. </li> <li>This feature is fully supported by CreateEntry but only partially supported by UpdateEntry. In <code>UpdateEntry</code>, GUID generation applies only when the consumer adds a navigation property with 1:N cardinality. In this case, the application will generate a table for that navigation property, including a create button for adding child entities to an existing parent entity in update mode.  </li> <li>DeleteEntry and DisplayEntry do not support this feature.</li> </ul> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u26a0\ufe0f Partial DeleteEntry \u274c No DisplayEntry \u274c No Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getGuidGenerationMode()</code> <code>GuidMode</code> Returns the current GUID generation mode for <code>Edm.Guid</code> properties. </p> <p> Method Parameter Type Mandatory Description <code>setGuidGenerationMode(newValue)</code> <code>newValue</code> <code>GuidMode</code> \u2705 Yes Sets the GUID generation mode for <code>Edm.Guid</code> properties. </p>"},{"location":"core_features/ui_settings/initial_data/#guidmode-values","title":"GuidMode Values","text":"Value Description <code>All</code> Generate random GUID values for all <code>Edm.Guid</code> properties, regardless of whether they are key or non-key fields. <code>Key</code> Generate random GUID values only for key <code>Edm.Guid</code> properties. <code>NonKey</code> Generate random GUID values only for <code>Edm.Guid</code> properties that are not keys. <code>None</code> Do not generate any GUID values automatically."},{"location":"core_features/ui_settings/initial_data/#example","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            guidGenerationMode: \"All\"\n        });\n\n        entry.run(); // Initial data is applied here\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                guidGenerationMode: \"All\"\n            });\n\n            entry.run(); // Initial data is applied here\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/initial_data/#initial-boolean-values-booleanfalsebydefault","title":"Initial Boolean Values (booleanFalseByDefault)","text":"<p>Specifies whether properties of type Edm.Boolean should default to <code>false</code> when no value is provided in the initial data.</p> <p>When enabled (<code>true</code>), all Edm.Boolean properties without explicitly set values will be initialized with <code>false</code> instead of <code>null</code>. This ensures more predictable behavior in forms and avoids unintended <code>null</code> states.</p> <p>Note</p> <ul> <li>Initial data can only be set by the consumer via the <code>run</code> method of the Entry class instance or Component instance. If the consumer sets initial data for <code>Edm.Boolean</code> properties explicitly, the library will not set the value <code>false</code> for those properties. </li> <li>This feature is fully supported by CreateEntry but only partially supported by UpdateEntry. In <code>UpdateEntry</code>, initial boolean values apply only when the consumer adds a navigation property with 1:N cardinality. In this case, the application will generate a table for that navigation property, including a create button for adding child entities to an existing parent entity in update mode.  </li> <li>DeleteEntry and DisplayEntry do not support this feature.</li> </ul> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u26a0\ufe0f Partial DeleteEntry \u274c No DisplayEntry \u274c No Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getBooleanFalseByDefault()</code> <code>boolean</code> Returns whether Edm.Boolean properties default to <code>false</code> in initial data. </p> <p> Method Parameter Type Mandatory Description <code>setBooleanFalseByDefault(newValue)</code> <code>newValue</code> <code>boolean</code> \u2705 Yes Sets whether Edm.Boolean properties default to <code>false</code> in initial data. </p>"},{"location":"core_features/ui_settings/initial_data/#example_1","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            booleanFalseByDefault: false // Library will not set any value for booleans\n        });\n\n        entry.run(); // Apply initial data\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                booleanFalseByDefault: false // Library will not set any value for booleans\n            });\n\n            entry.run(); // Apply initial data\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/label_generation/","title":"Label Generation","text":"<p>Not available yet...</p>"},{"location":"core_features/ui_settings/layout/","title":"Layout","text":"<p>Not available yet...</p>"},{"location":"core_features/ui_settings/layout/#content-wrapper-contentwrapper","title":"Content Wrapper (contentWrapper)","text":""},{"location":"core_features/ui_settings/layout/#formlayout-formlayout","title":"FormLayout (formLayout)","text":""},{"location":"core_features/ui_settings/messages/","title":"Messages","text":"<p>Not available yet...</p>"},{"location":"core_features/ui_settings/messages/#required-property-error-message-requiredpropertyerror","title":"Required Property Error Message (requiredPropertyError)","text":""},{"location":"core_features/ui_settings/messages/#validation-error-message-validationerrormessage","title":"Validation Error Message (validationErrorMessage)","text":""},{"location":"core_features/ui_settings/messages/#select-row-error-selectrowerror","title":"Select Row Error (selectRowError)","text":""},{"location":"core_features/ui_settings/messages/#show-error-messagebox-showerrormessagebox","title":"Show Error MessageBox (showErrorMessageBox)","text":""},{"location":"core_features/ui_settings/presentation/","title":"Presentation","text":"<p>This section describes the user interface\u2013related configuration options available for the Entry classes \u2014 CreateEntry, UpdateEntry, DeleteEntry, and DisplayEntry.  </p> <p>These options allow consumers to control various aspects of the generated UI, including rendering order, visibilities for properties of <code>Edm.Guid</code> type. </p> <p>Some configuration options may not be applicable to all Entry classes. Such limitations are clearly mentioned in the description of each feature.</p> <p>Configurations can be applied in two ways:</p> <ul> <li>In the constructor of the Entry class.</li> <li>Via getter/setter methods through an instance of an Entry class.</li> </ul> <p>Note</p> <p>All examples in this section use the CreateEntry class for demonstration purposes. The same configuration applies to other Entry classes as long as the specific feature is supported.</p>"},{"location":"core_features/ui_settings/presentation/#key-enforcement-keyenforcementenabled","title":"Key Enforcement (keyEnforcementEnabled)","text":"<p>When <code>keyEnforcementEnabled</code> is set to <code>true</code> (default), all key properties defined in the OData metadata are:</p> <ol> <li>Always included in the generated form.</li> <li>Automatically positioned at the top of the form.</li> </ol> <p>This ensures that essential identifying fields are always visible and prioritized for the end user. If you want to exclude key properties or change their position, you must explicitly set this flag to <code>false</code>.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getKeyEnforcementEnabled()</code> <code>boolean</code> Returns whether key enforcement is enabled. Defaults to <code>true</code>. </p> <p> Method Parameter Type Mandatory Description <code>setKeyEnforcementEnabled(newValue)</code> <code>newValue</code> <code>boolean</code> \u2705 Yes Enables or disables the enforcement of key properties in the generated form. </p>"},{"location":"core_features/ui_settings/presentation/#example","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            keyEnforcementEnabled: false // Allow excluding or reordering key properties\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                keyEnforcementEnabled: false // Allow excluding or reordering key properties\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/presentation/#property-order-propertyorder","title":"Property Order (propertyOrder)","text":"<p>By default, property controls (e.g., Input, DatePicker) are rendered in the order they appear in the OData metadata. The <code>propertyOrder</code> feature allows you to define a custom display sequence by listing property names in the desired order.</p> <p>The first property in the array will be rendered first in the form, followed by the next, and so on.</p> <p>Note</p> <p>If keyEnforcementEnabled is set to <code>true</code>, key properties are always displayed first, regardless of their position in this array.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getPropertyOrder()</code> <code>string[]</code> Returns the current property order. If not explicitly set, returns an empty array. </p> <p> Method Parameter Type Mandatory Description <code>setPropertyOrder(newValue)</code> <code>newValue</code> <code>string[]</code> \u2705 Yes Sets a custom property order for rendering fields in the generated form. </p>"},{"location":"core_features/ui_settings/presentation/#example_1","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            propertyOrder: [\n                \"ProductID\",   // First field\n                \"ProductName\", // Second field\n                \"Category\"     // Third field\n            ]\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                propertyOrder: [\n                    \"ProductID\",   // First field\n                    \"ProductName\", // Second field\n                    \"Category\"     // Third field\n                ]\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/presentation/#guid-visibility-mode-guidvisibilitymode","title":"Guid Visibility Mode (guidVisibilityMode)","text":"<p>Controls the visibility of properties with Edm.Guid type in the generated form.</p> <p>Supported modes:</p> <ul> <li>All \u2013 Displays all Edm.Guid properties.  </li> <li>Key \u2013 Displays only key Edm.Guid properties.  </li> <li>NonKey \u2013 Displays only non-key Edm.Guid properties.  </li> <li>None \u2013 Hides all Edm.Guid properties.  </li> </ul> <p>Note</p> <p>If keyEnforcementEnabled is set to <code>true</code>, all key properties (including Edm.Guid) are always displayed first in the form, even if <code>guidVisibilityMode</code> is set to hide them.</p> Entry Class Availability Entry Class Available CreateEntry \u2705 Yes UpdateEntry \u2705 Yes DeleteEntry \u2705 Yes DisplayEntry \u2705 Yes Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes GetterSetter <p> Method Returns Description <code>getGuidVisibilityMode()</code> <code>GuidMode</code> Returns the current visibility mode for Edm.Guid properties. </p> <p> Method Parameter Type Mandatory Description <code>setGuidVisibilityMode(newValue)</code> <code>newValue</code> <code>GuidMode</code> \u2705 Yes Sets the visibility mode for Edm.Guid properties. </p>"},{"location":"core_features/ui_settings/presentation/#guidmode-values","title":"GuidMode Values","text":"Value Description <code>All</code> Show all properties with type <code>Edm.Guid</code>, regardless of whether they are key or non-key fields. <code>Key</code> Show only those <code>Edm.Guid</code> properties that are keys in the entity. <code>NonKey</code> Show only <code>Edm.Guid</code> properties that are not keys (e.g., foreign keys, reference IDs). <code>None</code> Hide all <code>Edm.Guid</code> properties from the generated form."},{"location":"core_features/ui_settings/presentation/#example_2","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            guidVisibilityMode: \"All\"\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                guidVisibilityMode: \"All\"\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/ui_settings/presentation/#property-settings-propertysettings","title":"Property Settings (propertySettings)","text":"<p>Entity-specific configuration for individual properties belonging to the specified EntitySet. This array allows consumers to define property-level behaviors, such as marking fields as required, readonly, or excluded from the generated form or table.</p> Entry Class Availability Property CreateEntry UpdateEntry DeleteEntry DisplayEntry label \u2705 Yes \u2705 Yes \u2705 Yes \u2705 Yes required \u2705 Yes \u2705 Yes \u274c No \u274c No readonly \u2705 Yes \u2705 Yes \u274c No \u274c No excluded \u2705 Yes \u2705 Yes \u2705 Yes \u2705 Yes textInEditModeSource \u2705 Yes* \u2705 Yes* \u274c No \u274c No layoutData \u2705 Yes \u2705 Yes \u2705 Yes \u2705 Yes <p>*Requires <code>formType</code> to be SmartForm</p> Implementation Mode Availability Mode Available Dialog Mode \u2705 Yes Component Mode \u2705 Yes"},{"location":"core_features/ui_settings/presentation/#propertysettings-type","title":"PropertySettings Type","text":"Property Type Mandatory Description <code>name</code> <code>string</code> \u2705 Yes The technical name of the property in the entity. <code>label</code> <code>string</code> \u274c No Consumer-defined label for the property. If not provided, the library tries to derive it in the following order:1. Metadata labels (if <code>metadataLabelEnabled</code> is true in the Entry class).2. ResourceModel (i18n) labels based on naming conventions.3. Generated from the property\u2019s naming style (camelCase, CONSTANT_CASE). <code>required</code> <code>boolean</code> \u274c No Marks the property as required. <code>readonly</code> <code>boolean</code> \u274c No Marks the property as read-only. <code>excluded</code> <code>boolean</code> \u274c No Excludes the property from rendering in the generated UI. <code>textInEditModeSource</code> TextInEditModeSource \u274c No Source of display text in edit mode. Only applies when <code>formType</code> is <code>SmartForm</code>. <code>layoutData</code> LayoutData \u274c No Layout data applied to the generated control. GetterSetter <p> Method Returns Description <code>getPropertySettings()</code> <code>PropertySettings[]</code> Returns the current property settings array. </p> <p> Method Parameter Type Mandatory Description <code>setPropertySettings(newValue)</code> <code>newValue</code> <code>PropertySettings[]</code> \u2705 Yes Sets the property settings for the generated form or table. </p>"},{"location":"core_features/ui_settings/presentation/#example_3","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, \n            entitySet: \"Products\",\n            propertySettings: [\n                { name: \"ProductID\", required: true },\n                { name: \"ProductName\", label: \"Product Name\" },\n                { name: \"Category\", readonly: true }\n            ]\n        });\n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, \n                entitySet: \"Products\",\n                propertySettings: [\n                    { name: \"ProductID\", required: true },\n                    { name: \"ProductName\", label: \"Product Name\" },\n                    { name: \"Category\", readonly: true }\n                ]                    \n            });\n        }\n    });\n});\n</code></pre>"},{"location":"core_features/utilities/validation_logic/","title":"Validation Logic","text":"<p>Not available yet...</p>"},{"location":"core_features/utilities/value_list/","title":"Value List","text":"<p>Not available yet...</p>"},{"location":"create_entry/constructor/","title":"Constructor","text":"<p>To utilize the functionality provided by this class, it is required to instantiate and initialize the corresponding object prior to its use.</p> Parameter Type Mandatory Default Value Description controller Controller \u2705 Yes Instance of the consuming application's controller. Used internally to access models (ODataModel, ResourceModel) and the owner component context. entitySet string \u2705 Yes Exact name of the OData EntitySet to operate on, as defined in the service metadata. Must not include leading slash. modelRef string | ODataModel \u274c No Reference to the ODataModel instance or its name in the consuming app. If omitted, defaults to the unnamed ODataModel from the owner component. resourceModelRef string | ResourceModel \u274c No i18n Reference to the resource (i18n) model for label generation, either by name or instance. Defaults to <code>i18n</code> resource model from owner component. deferredGroupId string \u274c No ui5AntaresPro OData deferred batch group ID to be used for create operations, overriding the default <code>ui5AntaresPro</code>. index number \u274c No Insertion position index for the generated form within its parent container. Defaults to insertion as the first element if unspecified. dialogTitle string \u274c No Localized title Overrides the default localized title of the generated dialog with a custom string. formType FormType \u274c No SmartForm Specifies the form variant to generate: <code>SmartForm</code> or <code>SimpleForm</code>. Defaults to <code>SmartForm</code>. formTitle string \u274c No Optional title text displayed above the generated form. No title is shown by default. submitButtonText string \u274c No Localized text Text label for the submit button in the dialog. Defaults to localized standard text. submitButtonType ButtonType \u274c No Emphasized Visual type of the submit button control. Defaults to <code>Emphasized</code>. closeButtonText string \u274c No Localized text Text label for the dialog close button. Defaults to localized standard text. closeButtonType ButtonType \u274c No Default Visual type of the close button control. Defaults to <code>Default</code>. keyEnforcementEnabled boolean \u274c No true If enabled, key properties are enforced by including and positioning them at the top of the form. Disable to exclude or reorder key fields. metadataLabelEnabled boolean \u274c No false Enable automatic label generation from OData metadata annotations (<code>@Common.Text</code>) or <code>sap-label</code> property extensions. guidGenerationMode GuidMode \u274c No Key Determines which <code>Edm.Guid</code> properties receive generated GUID values on entity creation. Options: All, Key, NonKey, None. guidVisibilityMode GuidMode \u274c No NonKey Controls visibility of <code>Edm.Guid</code> properties in the form. Options: All, Key, NonKey, None. requiredPropertyError string \u274c No Localized error message Custom error message shown when required fields are empty. Triggers on form submission, when the user leaves the input field (focus out), or presses enter. Only applies to <code>SimpleForm</code>. Supports <code>{property}</code> placeholder. validationErrorMessage string \u274c No Localized error message Error message displayed in a MessageBox when form validation fails on submit. selectRowError string \u274c No Localized error message Message shown when a navigation operation requires row selection but none is selected in the table. showErrorMessageBox boolean \u274c No true Flag to enable or disable display of error MessageBox on submission errors. Defaults to enabled (<code>true</code>). booleanFalseByDefault boolean \u274c No true If true, <code>Edm.Boolean</code> properties default to <code>false</code> on new entities if no initial value is set; otherwise they remain <code>null</code>. autoCloseOnSuccess boolean \u274c No true Determines whether the dialog closes automatically after a successful submission. Defaults to <code>true</code>. dateTimeSettings DateTimeSettings \u274c No Configuration allowing consumers to define formatting patterns for date, time, and datetime properties. If not specified, formatting defaults to the user\u2019s locale settings based on OData types. numberSettings NumberSettings \u274c No Settings for numeric formatting including decimal separator, grouping separator, grouping size, and grouping enablement. contentWrapper ContentWrapper \u274c No Custom layout container wrapping the generated content. Defaults to standard Dialog or VBox container depending on context. propertySettings PropertySettings[] \u274c No Array of property-level configurations to mark individual properties as required, read-only, or excluded from the form or table. propertyOrder string[] \u274c No Custom sequence of property names to define display order in the form. Properties that are not listed in this array follow the metadata order. navigationProperties NavigationProperty[] \u274c No          Array of navigation property configurations to be included within the generated dialog or component. The library supports both 1:1 and 1:N cardinalities: for 1:1 associations, it generates an additional form representing the target entity; for 1:N associations, it creates a table displaying the related entities. Each navigation property should be an instance of <code>ui5.antares.pro.v2.metadata.NavigationProperty</code>, where its specific settings are defined during instantiation.        validationLogics ValidationLogic[] \u274c No          Collection of validation logic instances executed prior to entity submission to enforce complex business or data integrity rules on user input. Each <code>ui5.antares.pro.v2.validation.ValidationLogic</code> instance encapsulates a particular validation rule, configured via its constructor. This enables modular, reusable, and composable validation checks that minimize data entry errors and improve UX consistency.        valueLists ValueList[] \u274c No          Definitions of value help dialogs applied to <code>Edm.String</code> or <code>Edm.Guid</code> typed properties. Managed through instances of the <code>ui5.antares.pro.v2.valuelist.ValueList</code> class, consumers specify the target entity set for lookup, properties to display, and filter/search behavior. The library internally manages selection and filtering logic based on this configuration, providing consistent and flexible value help UI integration.        formLayout FormLayout \u274c No          Enables overriding the default form layout used within the generated dialog or component. By default, a standard form layout is applied; specifying a custom <code>FormLayout</code> instance allows consumers to define alternate visual structures and arrangement of form elements, facilitating tailored UX designs to meet specific project requirements.        customElements CustomElement[] \u274c No          Allows the injection of custom SAPUI5 controls to replace the default controls generated automatically for specific entity properties. Each <code>ui5.antares.pro.v2.custom.CustomElement</code> instance specifies the property to override and the control to insert (e.g., a slider instead of an input field). When provided, the library skips default generation for that property, enabling advanced UI customization while maintaining integration with the form lifecycle.        customContents CustomContent[] \u274c No          Additional custom SAPUI5 controls to be added anywhere within the generated dialog or component's UI. These controls must be wrapped in <code>ui5.antares.pro.v2.custom.CustomContent</code> instances, which specify placement and grouping. The consumer is responsible for managing the lifecycle, event handling, and behavior of these controls. The library solely handles positioning, allowing flexible extension of the generated UI without losing control over custom elements."},{"location":"create_entry/constructor/#example","title":"Example","text":"TypeScriptJavaScript Main.controller.ts<pre><code>import Controller from \"sap/ui/core/mvc/Controller\";\nimport CreateEntry from \"ui5/antares/pro/v2/entry/CreateEntry\"; // Import the class\n\n/**\n * @namespace your.apps.namespace\n */\nexport default class Main extends Controller {\n    public onInit() {\n\n    }\n\n    public async onCreateProduct() {\n        const entry = new CreateEntry({\n            controller: this, // Controller instance\n            entitySet: \"Products\" // EntitySet name\n        }); \n    }\n}\n</code></pre> Main.controller.js<pre><code>sap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"ui5/antares/pro/v2/entry/CreateEntry\" // Import the class\n], (Controller, CreateEntry) =&gt; {\n    \"use strict\";\n\n    return Controller.extend(\"your.apps.namespace.Main\", {\n        onInit: function () {\n\n        },\n\n        onCreateProduct: async function () {\n            const entry = new CreateEntry({\n                controller: this, // Controller instance\n                entitySet: \"Products\" // EntitySet name\n            });\n        }\n    });\n});\n</code></pre>"},{"location":"create_entry/key_features/","title":"Key Features","text":""},{"location":"create_entry/key_features/#1-automatic-ui-generation","title":"1. Automatic UI Generation","text":"<ul> <li> <p>Dynamic Form Creation   Depending on the consumer's configuration, the class auto-generates a fully functional data entry form within either a modal dialog or an embedded component.  </p> </li> <li> <p>Support for Different Form Types   Generates either a SmartForm (default) or a SimpleForm, accommodating various application needs and complexity levels.</p> </li> <li> <p>Property Control Generation   Automatically creates appropriate UI controls (e.g., Input, DatePicker, CheckBox) based on the OData metadata of the target entity\u2019s properties, including handling different data types, such as strings, dates, GUIDs, and booleans.</p> </li> </ul>"},{"location":"create_entry/key_features/#2-navigation-property-support","title":"2. Navigation Property Support","text":"<ul> <li> <p>1:1 Navigation Forms   For single-valued navigation properties, the library generates nested forms enabling data input for related entities inline.  </p> </li> <li> <p>1:N Navigation Tables   For collection-valued navigation properties, it generates tables to manage related entities, supporting add, edit, and delete operations on related rows.</p> </li> </ul>"},{"location":"create_entry/key_features/#3-validation-and-required-field-checks","title":"3. Validation and Required Field Checks","text":"<ul> <li> <p>Built-in Validation   Enforces required fields and data type correctness (e.g., date formats, GUID validity) before allowing submission.  </p> </li> <li> <p>Custom Validation Logic   Supports integration of user-defined validation rules, providing flexible pre-submission validation strategies.  </p> </li> <li> <p>Error Messaging   Automatically displays validation error messages with localization support and customizable error text.</p> </li> </ul>"},{"location":"create_entry/key_features/#4-submission-handling","title":"4. Submission Handling","text":"<ul> <li> <p>Seamless OData Integration   Submits the new entity via the configured ODataModel, leveraging deferred batch groups for optimized server communication.  </p> </li> <li> <p>Robust Error Handling   Displays detailed error messages extracted from OData error responses or fallback defaults, configurable by the consumer.  </p> </li> <li> <p>Event Notifications   Fires events signaling success or failure of submissions, enabling consuming applications to react accordingly.</p> </li> </ul>"},{"location":"create_entry/key_features/#5-flexible-configuration","title":"5. Flexible Configuration","text":"<ul> <li> <p>Entity Set and Model References   Allows specification of the target EntitySet and references to the ODataModel and resource (i18n) models used in the consumer app.  </p> </li> <li> <p>Form and Dialog Customization   Supports customized titles, button texts, button types, and content insertion indices.  </p> </li> <li> <p>Property-level Settings   Enables fine-grained control over individual property behavior, such as setting fields as required, readonly, or excluded.  </p> </li> <li> <p>GUID Handling Modes   Provides modes for GUID generation and visibility to control how GUID-type properties are treated in the form.  </p> </li> <li> <p>Date, Time, and Number Formatting   Accepts configuration objects to tailor the formatting of date/time and numeric fields according to user locale or custom patterns.  </p> </li> <li> <p>Content Wrapper Injection   Allows injection of custom UI layouts to wrap generated forms and tables, enabling advanced UI composition scenarios.</p> </li> </ul>"},{"location":"home/installation/","title":"Installation","text":"<p>This page provides detailed installation and configuration instructions for the UI5 Antares Pro library.</p>"},{"location":"home/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing and using UI5 Antares Pro, ensure that the following tools are available in your development environment:</p> <ul> <li> <p>Node.js   Required to run the UI5 tooling and package scripts.</p> </li> <li> <p>npm (Node Package Manager)   Used for managing dependencies and building the project.</p> </li> <li> <p>UI5 CLI (Version 4 or higher)   Must be installed either globally or locally in your project.   This tool is essential for building and serving SAPUI5 projects using the UI5 Tooling ecosystem.</p> </li> </ul> <p>To verify that all required tools are installed correctly, run the following commands:</p> <pre><code>node -v &amp;&amp; npm -v\nv22.15.0\n10.9.2\n</code></pre> Locally installed UI5 ToolingGlobally installed UI5 Tooling <pre><code>npx ui5 -v\n4.0.15\n</code></pre> <pre><code>ui5 -v\n4.0.15\n</code></pre>"},{"location":"home/installation/#versioning-strategy","title":"Versioning Strategy","text":"<p>UI5 Antares Pro adheres to a versioning strategy that aligns closely with officially supported SAPUI5 long-term maintenance (LTS) releases. Since the library builds upon and depends on standard SAPUI5 components without any modifications, compatibility is strictly maintained with specific SAPUI5 versions.</p>"},{"location":"home/installation/#supported-sapui5-versions","title":"Supported SAPUI5 Versions","text":"<p>The library officially supports the following SAPUI5 LTS versions:</p> <ul> <li><code>1.120.x</code></li> <li><code>1.136.x</code></li> </ul> <p>While <code>x</code> refers to the latest patch available in each version series, it is likely that earlier patch versions within the same major version will also be compatible. However, users are encouraged to validate compatibility in their respective environments.</p>"},{"location":"home/installation/#tag-based-release-system","title":"Tag-Based Release System","text":"<p>To ensure clarity and flexibility in installation, UI5 Antares Pro utilizes npm dist-tags to distinguish releases by their target SAPUI5 version. The latest version of the library compatible with each supported SAPUI5 release will be tagged accordingly:</p> <ul> <li><code>ui5-1.120.x-latest</code></li> <li><code>ui5-1.136.x-latest</code></li> </ul> <p>Recommended</p> <p>Always install the library using one of the official tags to ensure alignment with your SAPUI5 runtime version.</p> <pre><code># Example: Install the latest version for SAPUI5 1.136.x\nnpm install ui5-antares-pro@ui5-1.136.x-latest\n</code></pre>"},{"location":"home/installation/#upgrades-and-future-lts-support","title":"Upgrades and Future LTS Support","text":"<p>Whenever SAP releases a new patch within any of the supported versions, UI5 Antares Pro will be updated accordingly and published under a new incremental version while preserving the appropriate tag.</p> <p>When SAP introduces a new LTS version, UI5 Antares Pro will evaluate and incorporate support for it, including issuing a corresponding tag (e.g., <code>ui5-1.148.x-latest</code>), following the same structured release process.</p> <p>Why this matters</p> <p>This strategy ensures that consumers have precise control over compatibility, stability, and upgrade paths while benefiting from the latest improvements in both SAPUI5 and UI5 Antares Pro.</p>"},{"location":"home/installation/#version-mapping","title":"Version Mapping","text":"<p>The table below shows the relationship between the supported SAPUI5 LTS versions and their corresponding UI5 Antares Pro release tags:</p> SAPUI5 Version UI5 Antares Pro Tag Description <code>1.120.x</code> <code>ui5-1.120.x-latest</code> Latest compatible release for 1.120.x <code>1.136.x</code> <code>ui5-1.136.x-latest</code> Latest compatible release for 1.136.x <p>Installation Example</p> <pre><code># Install Antares Pro for SAPUI5 1.120.x\nnpm install ui5-antares-pro@ui5-1.120.x-latest\n</code></pre> <p>Future Support</p> <p>When SAP releases a new LTS version (e.g., 1.148.x), a corresponding tag (e.g., <code>ui5-1.148.x-latest</code>) will be introduced.</p>"},{"location":"home/installation/#installation-steps","title":"Installation Steps","text":"<p>Follow the steps below to install and configure UI5 Antares Pro in your SAPUI5 application.</p>"},{"location":"home/installation/#1-install-via-npm","title":"1. Install via NPM","text":"<p>Run the following command in the root directory of your UI5 app (where the <code>package.json</code> is located):</p> <pre><code>npm install ui5-antares-pro@ui5-1.136.x-latest\n</code></pre> <p>Tag Selection</p> <p>Replace <code>ui5-1.136.x-latest</code> with the tag that matches your SAPUI5 version. Available tags:</p> <ul> <li><code>ui5-1.136.x-latest</code></li> <li><code>ui5-1.120.x-latest</code></li> </ul>"},{"location":"home/installation/#2-add-the-library-to-manifestjson-dependencies","title":"2. Add the Library to <code>manifest.json</code> (Dependencies)","text":"<p>Add the library to the <code>\"sap.ui5\".\"dependencies\".\"libs\"</code> section:</p> manifest.json<pre><code>{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"dependencies\": {\n      ...\n      \"libs\": {\n        \"sap.m\": {},\n        \"sap.ui.core\": {},\n        ...\n        \"ui5.antares.pro\": {}\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"home/installation/#3-configure-resource-roots","title":"3. Configure Resource Roots","text":"<p>Add the following entry to the <code>\"sap.ui5\".\"resourceRoots\"</code> section in your <code>manifest.json</code>:</p> manifest.json<pre><code>{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"resourceRoots\": {\n      \"ui5.antares.pro\": \"./resources/ui5/antares/pro\"\n    }\n  }\n}\n</code></pre>"},{"location":"home/installation/#4-optional-enable-reuse-components-component-mode","title":"4. (Optional) Enable Reuse Components (Component Mode)","text":"<p>If you wish to use the provided reusable components (<code>create</code>, <code>update</code>, <code>delete</code>, <code>display</code>), follow these two steps:</p>"},{"location":"home/installation/#a-add-component-dependencies","title":"a. Add Component Dependencies","text":"<p>Include them under <code>\"sap.ui5\".\"dependencies\".\"components\"</code>:</p> manifest.json<pre><code>{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"dependencies\": {\n      ...\n      \"components\": {\n        \"ui5.antares.pro.v2.component.create\": {\n          \"lazy\": false\n        },\n        \"ui5.antares.pro.v2.component.update\": {\n          \"lazy\": false\n        },\n        \"ui5.antares.pro.v2.component.delete\": {\n          \"lazy\": false\n        },\n        \"ui5.antares.pro.v2.component.display\": {\n          \"lazy\": false\n        }\n      }      \n    }\n  }\n}\n</code></pre>"},{"location":"home/installation/#b-define-component-usages","title":"b. Define Component Usages","text":"<p>Add entries under <code>\"sap.ui5\".\"componentUsages\"</code>:</p> manifest.json<pre><code>{\n  ...\n  \"sap.ui5\": {\n    ...\n    \"componentUsages\": {\n      \"ui5AntaresProCreateEntry\": {\n        \"name\": \"ui5.antares.pro.v2.component.create\"\n      },\n      \"ui5AntaresProUpdateEntry\": {\n        \"name\": \"ui5.antares.pro.v2.component.update\"\n      },\n      \"ui5AntaresProDeleteEntry\": {\n        \"name\": \"ui5.antares.pro.v2.component.delete\"\n      },\n      \"ui5AntaresProDisplayEntry\": {\n        \"name\": \"ui5.antares.pro.v2.component.display\"\n      }\n    }    \n  }\n}\n</code></pre> <p>Component Container Integration</p> <p>The <code>componentUsages</code> keys (e.g., <code>ui5AntaresProCreateEntry</code>) can be used as the <code>usage</code> attribute in the <code>ComponentContainer</code>.</p>"},{"location":"home/installation/#5-adjust-build-script","title":"5. Adjust Build Script","text":"<p>To ensure the library is included during the build, add the <code>--all</code> flag to your build script in <code>package.json</code>:</p> package.json<pre><code>{\n  ...\n  \"scripts\": {\n    \"build\": \"ui5 build --all --config=ui5.yaml --clean-dest --dest dist\"\n  }  \n}\n</code></pre>"},{"location":"home/installation/#6-configure-deployment-ui5-task-zipper","title":"6. Configure Deployment (ui5-task-zipper)","text":"<p>To ensure the library is included during deployment, set <code>includeDependencies: true</code> in your <code>ui5.yaml</code> or corresponding build configuration:</p> ui5-deploy.yaml<pre><code>...\nbuilder:\n  customTasks:\n    - name: ui5-task-zipper\n      afterTask: generateCachebusterInfo\n      configuration:\n        includeDependencies: true\n</code></pre> <p>Note</p> <p>This configuration is essential for deploying the library alongside your app.</p>"},{"location":"home/installation/#7-optional-typescript-configuration","title":"7. (Optional) TypeScript Configuration","text":"<p>If your SAPUI5 application is developed using TypeScript, you must inform the compiler about the types provided by UI5 Antares Pro. To do this, add the library to the <code>\"types\"</code> array in your <code>tsconfig.json</code> file:</p> tsconfig.json<pre><code>{\n  \"compilerOptions\": {\n    ...\n    \"types\": [\n      \"@sapui5/types\", \n      \"ui5-antares-pro\"\n    ]\n  }\n}\n</code></pre> <p>This step ensures that TypeScript can correctly resolve type definitions from both SAPUI5 and UI5 Antares Pro, enabling type checking, IntelliSense, and autocompletion throughout your project.</p>"},{"location":"home/installation/#8-optional-btp-deployment-configuration-xs-appjson","title":"8. (Optional) BTP Deployment Configuration (<code>xs-app.json</code>)","text":"<p>If your application is deployed to the SAP BTP environment, it will typically include an <code>xs-app.json</code> file to configure route handling for the Standalone or Managed AppRouter.</p> <p>By default, SAP\u2019s UI5 project generator includes the following route in the <code>routes</code> section:</p> xs-app.json<pre><code>{\n  \"welcomeFile\": \"/index.html\",\n  \"authenticationMethod\": \"route\",\n  \"routes\": [\n    ...\n    {\n      \"source\": \"^/resources/(.*)$\",\n      \"target\": \"/resources/$1\",\n      \"authenticationType\": \"none\",\n      \"destination\": \"ui5\"\n    }  \n  ]\n}\n</code></pre> <p>This configuration forwards requests to <code>/resources/</code> to the SAPUI5 CDN via the <code>ui5</code> destination. However, the UI5 Antares Pro library is not hosted on the SAPUI5 CDN \u2014 it resides in the HTML5 Application Repository of your deployed application.</p> <p>To make the library available, you must add the following route to the <code>xs-app.json</code> of your UI5 application:</p> <p>Attention</p> <p>The route highlighted below must be added before the <code>/resources/</code> route which is forwarding requests to the <code>ui5</code> destination.</p> xs-app.json<pre><code>{\n  \"welcomeFile\": \"/index.html\",\n  \"authenticationMethod\": \"route\",\n  \"routes\": [\n    ...\n    {\n      \"source\": \"^/resources/ui5/antares/pro/(.*)$\",\n      \"target\": \"/resources/ui5/antares/pro/$1\",\n      \"service\": \"html5-apps-repo-rt\",\n      \"authenticationType\": \"xsuaa\"\n    },\n    {\n      \"source\": \"^/resources/(.*)$\",\n      \"target\": \"/resources/$1\",\n      \"authenticationType\": \"none\",\n      \"destination\": \"ui5\"\n    },\n    {\n      \"source\": \"^/test-resources/(.*)$\",\n      \"target\": \"/test-resources/$1\",\n      \"authenticationType\": \"none\",\n      \"destination\": \"ui5\"\n    },\n    {\n      \"source\": \"^(.*)$\",\n      \"target\": \"$1\",\n      \"service\": \"html5-apps-repo-rt\",\n      \"authenticationType\": \"xsuaa\"\n    }      \n  ]\n}\n</code></pre> <p>Note</p> <p>If you're using a Standalone AppRouter, ensure this configuration is added to the <code>xs-app.json</code> of the UI5 application itself, not the AppRouter's <code>xs-app.json</code>.</p> <p>This route ensures that requests for UI5 Antares Pro resources are served from the HTML5 repository where the app is deployed.</p>"},{"location":"home/license_and_usage_notice/","title":"License and Usage Notice","text":"<p>This library leverages standard classes and components provided by the SAPUI5 framework without modifying or redistributing SAPUI5 source code. SAPUI5 is licensed under the SAP Developer License. Users of UI5 Antares Pro are responsible for reviewing and complying with the terms and conditions of the SAP Developer License.</p> <p>Careful attention must be paid to the licensing restrictions when integrating UI5 Antares Pro in projects that include SAPUI5 dependencies.</p> <p>This project is licensed under the Apache License 2.0 - see the LICENSE file for details.    </p>"},{"location":"home/local_testing/","title":"Local Testing","text":"<p>When developing a SAPUI5 application locally, the UI5 Antares Pro library can be loaded and used automatically after completing the standard installation and configuration steps. This is true regardless of whether the application is started using one of the following commands:</p> <ul> <li>@ui5/cli</li> <li>@sap/ux-ui5-tooling</li> </ul> @ui5/cli@sap/ux-ui5-tooling <pre><code>ui5 serve\n</code></pre> <pre><code>fiori run\n</code></pre> <p>Both approaches internally compile the application and expose it on a local development server. They also typically rely on a configuration file (e.g., ui5.yaml) located at the root of the project (alongside package.json) to proxy backend and UI5 resource requests.</p> <p>For applications generated using standard SAP generators (such as easy-ui5, SAP Fiori tools, or the Business Application Studio templates), this configuration file will most likely include the <code>fiori-tools-proxy</code> middleware. This middleware handles routing of requests during local development.</p>"},{"location":"home/local_testing/#role-of-the-fiori-tools-proxy","title":"Role of the fiori-tools-proxy","text":"<p>The <code>fiori-tools-proxy</code> middleware is responsible for forwarding certain request paths to external systems, such as:</p> <ul> <li>The SAPUI5 CDN (for loading standard UI5 libraries)</li> <li>Backend systems (e.g., for OData service calls)</li> </ul> <p>A typical configuration looks like this:</p> ui5.yaml<pre><code>specVersion: \"4.0\"\nmetadata:\n  name: test.ui5.antares.pro.employeeui\ntype: application\nserver:\n  customMiddleware:\n    - name: fiori-tools-proxy\n      afterMiddleware: compression\n      configuration:\n        ignoreCertError: true\n        ui5:\n          path:\n            - /resources\n            - /test-resources\n          url: https://ui5.sap.com\n        backend:\n          - path: /sap\n            url: https://backend-system:44300\n            client: '200'\n</code></pre> <p>In this setup:</p> <ul> <li>All requests to <code>/resources</code> and <code>/test-resources</code> are forwarded to the SAPUI5 CDN at https://ui5.sap.com.</li> <li>All requests to <code>/sap</code> are forwarded to the defined backend system.</li> </ul> <p>This setup works perfectly for loading standard SAPUI5 libraries like sap.m, sap.ui.core, etc.</p>"},{"location":"home/local_testing/#the-problem-custom-library-conflicts-with-the-proxy","title":"The Problem: Custom Library Conflicts with the Proxy","text":"<p>When the UI5 Antares Pro library is added as a dependency and built using ui5 build, its content is emitted into the <code>/resources</code> directory. This means that locally, after a successful build, the library is available under:</p> <ul> <li>/resources/ui5/antares/pro/</li> </ul> <p>For example:</p> <ul> <li>/resources/ui5/antares/pro/library.js</li> <li>/resources/ui5/antares/pro/v2/entry/CreateEntry.js</li> <li>/resources/ui5/antares/pro/v2/component/create/Component.js</li> </ul> <p>However, due to the way the <code>fiori-tools-proxy</code> is configured, all requests to <code>/resources</code> are blindly forwarded to the UI5 CDN \u2014 including those that actually target the UI5 Antares Pro library. This leads to the development server attempting to fetch:</p> <ul> <li>https://ui5.sap.com/resources/ui5/antares/pro/library.js</li> </ul> <p>\u2026which results in a 404 Not Found error, because UI5 Antares Pro is a custom library and does not exist on the SAPUI5 CDN.</p> <p>This causes the application to break locally since the required library files cannot be resolved, even though they exist within the build output of the project itself.</p>"},{"location":"home/local_testing/#solution-1-recommended-using-the-ui5-antares-pro-proxy-package","title":"Solution 1 (Recommended): Using the UI5 Antares Pro Proxy Package","text":"<p>UI5 Antares Pro provides an additional NPM package designed specifically to enable smooth local testing of SAPUI5 applications that use the library. This package is called ui5-antares-pro-proxy and serves as a custom middleware for the UI5 tooling.</p> <p>The main purpose of this middleware is to take over the UI5 resource request handling from the default <code>fiori-tools-proxy</code> and ensure that:  </p> <ol> <li>Standard SAPUI5 library requests are still forwarded to the SAPUI5 CDN at https://ui5.sap.com or custom CDN url that can be configured by the consumer.  </li> <li>UI5 Antares Pro resources are always loaded from the local development environment, ensuring that the library functions without 404 errors during local development.</li> </ol> <p>Attention</p> <p>While this proxy fully manages the UI5 resource routing, it does not provide backend request handling. This means that requests to your backend system (e.g., <code>/sap/opu/odata/...</code>) must still be handled by the <code>fiori-tools-proxy</code> middleware in your <code>ui5.yaml</code> configuration.</p> <p>The ui5-antares-pro-proxy middleware is added to the same YAML configuration file that controls the UI5 tooling (ui5 serve or fiori run). It works seamlessly alongside other middleware definitions.</p> <p>Further installation and configuration instructions for ui5-antares-pro-proxy can be found in the official package documentation: ui5-antares-pro-proxy</p>"},{"location":"home/local_testing/#solution-2-removing-the-ui5-block-from-fiori-tools-proxy","title":"Solution 2: Removing the <code>ui5</code> Block from <code>fiori-tools-proxy</code>","text":"<p>Another possible solution is to remove the <code>ui5</code> block from the fiori-tools-proxy configuration in the <code>ui5.yaml</code> file used by the UI5 tooling (<code>ui5 serve</code> or <code>fiori run</code>) to run the application.</p> <p>Once this block is removed, the fiori-tools-proxy will automatically load the UI5 resources from https://ui5.sap.com using the version specified in the <code>manifest.json</code> file under:</p> <p>\"sap.ui5\" \u2192 \"dependencies\" \u2192 \"minUI5Version\"</p> <p>Advantages</p> <ul> <li>Fastest solution to implement.</li> <li>No additional packages or complex configuration required.</li> </ul> <p>Disadvantages</p> <ul> <li>The UI5 CDN URL or the UI5 version cannot be changed via the <code>fiori-tools-proxy</code> configuration anymore.</li> <li>Any change to the UI5 version must be made in the <code>manifest.json</code> file instead.</li> </ul> BeforeAfter ui5.yaml<pre><code>specVersion: \"4.0\"\nmetadata:\n  name: your.app.name\ntype: application\nserver:\n  customMiddleware:   \n    - name: fiori-tools-proxy\n      afterMiddleware: compression\n      configuration:\n        ignoreCertError: true\n        ui5:                             # \u274c REMOVE THIS BLOCK\n          path:\n            - /resources\n            - /test-resources\n          url: https://ui5.sap.com\n        backend:\n          - path: /sap\n            url: https://your.backend.url\n            client: '200'\n</code></pre> ui5.yaml<pre><code>specVersion: \"4.0\"\nmetadata:\n  name: your.app.name\ntype: application\nserver:\n  customMiddleware:   \n    - name: fiori-tools-proxy\n      afterMiddleware: compression\n      configuration:\n        ignoreCertError: true\n        backend:\n          - path: /sap\n            url: https://your.backend.url\n            client: '200'\n</code></pre>"},{"location":"home/local_testing/#solution-3-changing-the-resources-path-in-ui5-block-of-fiori-tools-proxy","title":"Solution 3: Changing the <code>/resources</code> path in <code>ui5</code> block of <code>fiori-tools-proxy</code>","text":"<p>Modify the <code>/resources</code> path in the <code>ui5</code> block of <code>fiori-tools-proxy</code> so that it does not conflict with the UI5 Antares Pro resource path (<code>/resources/ui5/antares/pro/...</code>).</p> <p>This solution requires changes in both <code>ui5.yaml</code> and <code>index.html</code> files.</p> BeforeAfter ui5.yaml<pre><code>specVersion: \"4.0\"\nmetadata:\n  name: your.app.name\ntype: application\nserver:\n  customMiddleware:   \n    - name: fiori-tools-proxy\n      afterMiddleware: compression\n      configuration:\n        ignoreCertError: true\n        ui5:                             \n          path:\n            - /resources # Change the path\n            - /test-resources\n          url: https://ui5.sap.com\n        backend:\n          - path: /sap\n            url: https://your.backend.url\n            client: '200'\n</code></pre> ui5.yaml<pre><code>specVersion: \"4.0\"\nmetadata:\n  name: your.app.name\ntype: application\nserver:\n  customMiddleware:   \n    - name: fiori-tools-proxy\n      afterMiddleware: compression\n      configuration:\n        ignoreCertError: true\n        ui5:                             \n          path:\n            - /ui5-resources\n            - /test-resources\n          url: https://ui5.sap.com            \n        backend:\n          - path: /sap\n            url: https://your.backend.url\n            client: '200'\n</code></pre> <p>Modify the <code>src</code> attribute of the script in <code>index.html</code> file of your application. The UI5 resources are loaded from the specified address in this attribute. It must match to the path specified in <code>ui5</code> block of <code>fiori-tools-proxy</code> configuration.</p> <p>Attention</p> <p>When deploying the application, you must revert the <code>index.html</code> change. If not reverted, the deployed app will fail to load UI5 resources because it will attempt to fetch them via the modified path.</p> BeforeAfter index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;Your App&lt;/title&gt;\n    &lt;style&gt;\n        html, body, body &gt; div, #container, #container-uiarea {\n            height: 100%;\n        }\n    &lt;/style&gt;\n    &lt;script\n        id=\"sap-ui-bootstrap\"\n        src=\"resources/sap-ui-core.js\" &lt;!-- change the path as in the fiori-tools-proxy configuration --&gt;\n        data-sap-ui-theme=\"sap_horizon\"\n        data-sap-ui-resourceroots='{\n            \"your.app.namespace\": \"./\"\n        }'\n        data-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n        data-sap-ui-compatVersion=\"edge\"\n        data-sap-ui-async=\"true\"\n        data-sap-ui-frameOptions=\"trusted\"\n    &gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body class=\"sapUiBody sapUiSizeCompact\" id=\"content\"&gt;\n    &lt;div\n        data-sap-ui-component\n        data-name=\"your.app.namespace\"\n        data-id=\"container\"\n        data-settings='{\"id\" : \"your.app.namespace\"}'\n        data-handle-validation=\"true\"\n    &gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;Your App&lt;/title&gt;\n    &lt;style&gt;\n        html, body, body &gt; div, #container, #container-uiarea {\n            height: 100%;\n        }\n    &lt;/style&gt;\n    &lt;script\n        id=\"sap-ui-bootstrap\"\n        src=\"ui5-resources/sap-ui-core.js\"\n        data-sap-ui-theme=\"sap_horizon\"\n        data-sap-ui-resourceroots='{\n            \"your.app.namespace\": \"./\"\n        }'\n        data-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n        data-sap-ui-compatVersion=\"edge\"\n        data-sap-ui-async=\"true\"\n        data-sap-ui-frameOptions=\"trusted\"\n    &gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body class=\"sapUiBody sapUiSizeCompact\" id=\"content\"&gt;\n    &lt;div\n        data-sap-ui-component\n        data-name=\"your.app.namespace\"\n        data-id=\"container\"\n        data-settings='{\"id\" : \"your.app.namespace\"}'\n        data-handle-validation=\"true\"\n    &gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}]}